<?php

/**
 * @file
 * The Meteor SSO support module.
 */

/**
 * @defgroup meteor Meteor module
 * @ingroup meteor
 * @{
 * The Meteor module provides:
 * - a MeteorServer config entity type, holding server registrations
 * - routes used by the Meteor SSO package to support reactive login updates
 *
 * You can administer servers at &lt;your_site_root&gt;/admin/structure/meteor.
 */

/**
 * @} End of "defgroup meteor".
 */

use GuzzleHttp\Promise\PromiseInterface;

/**
 * Shutdown function to perform a deferred HTTP request.
 *
 * @param \GuzzleHttp\Promise\PromiseInterface $promise
 *   The promise to fulfill.
 */
function meteor_finalize_wait(PromiseInterface $promise) {
  try {
    /** @var \GuzzleHttp\Psr7\Response $result */
    $result = $promise->wait(TRUE);
    $status = $result->getStatusCode();
    $body = $result->getBody();
    \Drupal::logger('meteor')->info("Notified got @status: @body", [
      '@status' => $status,
      '@body' => $body,
    ]);
  }
  catch (\GuzzleHttp\Exception\ConnectException $e) {
    watchdog_exception('meteor', $e);
  }
}

/**
 * Send a notification to a Meteor server.
 *
 * @param int $delay
 *   The delay to apply to the notification.
 */
function meteor_notify($delay) {
  $path = $delay ? 'updateUserDeferred' : 'updateUser';

  /** @var \GuzzleHttp\Client $client */
  $client = \Drupal::service('http_client');
  $host = \Drupal::config('meteor.settings')->get('meteor_server');
  $promise = $client->getAsync("$host/$path");
  \Drupal::logger('meteor')->info("Notified @host/@path/@delay", [
    '@host' => $host,
    '@path' => $path,
    '@delay' => $delay,
  ]);
  drupal_register_shutdown_function(function () use ($promise) {
    meteor_finalize_wait($promise);
  });
}

/**
 * Implements hook_user_logout().
 */
function meteor_user_logout($account) {
  meteor_notify(0);
}

/**
 * Implements hook_user_login().
 */
function meteor_user_login($account) {
  /** @var \GuzzleHttp\Client $client */
  meteor_notify(1000);
}
